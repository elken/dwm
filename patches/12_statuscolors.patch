--- dwm.c.orig	2015-06-21 17:38:47.616569333 +0100
+++ dwm.c	2015-06-21 17:39:31.103884473 +0100
@@ -56,6 +56,7 @@
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define PREVSEL                 3000
 #define LENGTH(X)               (sizeof X / sizeof X[0])
+#define MAXCOLORS               13
 #define MOD(N,M)                ((N)%(M) < 0 ? (N)%(M) + (M) : (N)%(M))
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -285,7 +286,7 @@ static void (*handler[LASTEvent]) (XEven
 static Atom wmatom[WMLast], netatom[NetLast];
 static Bool running = True;
 static Cur *cursor[CurLast];
-static ClrScheme scheme[SchemeLast];
+static ClrScheme scheme[MAXCOLORS];
 static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
@@ -786,12 +787,12 @@ drawbar(Monitor *m) {
 	x = 0;
 	for(i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i].name);
-		drw_setscheme(drw, &scheme[m->tagset[m->seltags] & 1 << i) ? 10 : (urg & 1 << i ? 11 : (occ & 1 << i ? 12 : 9))]);
+		drw_setscheme(drw, &scheme[(m->tagset[m->seltags] & 1 << i) ? 10 : (urg & 1 << i ? 11 : (occ & 1 << i ? 12 : 9))]);
 		drw_text(drw, x, 0, w, bh, tags[i].name, urg & 1 << i);
 		x += w;
 	}
 	w = blw = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, &scheme[SchemeNorm]);
+	drw_setscheme(drw, &scheme[9]);
 	drw_text(drw, x, 0, w, bh, m->ltsymbol, 0);
 	x += w;
 	xx = x;
@@ -819,7 +820,7 @@ drawbar(Monitor *m) {
 		x = m->ww;
 	if((w = x - xx) > bh) {
 		x = xx;
-                drw_setscheme(drw, &scheme[SchemeNorm]);
+                drw_setscheme(drw, &scheme[9]);
                 drw_text(drw, x, 0, w, bh, NULL, 0);
 	}
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
@@ -876,7 +877,7 @@ focus(Client *c) {
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, True);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel].border->pix);
+		XSetWindowBorder(dpy, c->win, scheme[1].border->pix);
 		setfocus(c);
 	}
 	else {
@@ -1125,7 +1126,7 @@ manage(Window w, XWindowAttributes *wa)
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, w, scheme[0].border->pix);
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatewindowtype(c);
 	updatesizehints(c);
@@ -1670,12 +1671,12 @@ setup(void) {
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
-	scheme[SchemeNorm].border = drw_clr_create(drw, normbordercolor);
-	scheme[SchemeNorm].bg = drw_clr_create(drw, normbgcolor);
-	scheme[SchemeNorm].fg = drw_clr_create(drw, normfgcolor);
-	scheme[SchemeSel].border = drw_clr_create(drw, selbordercolor);
-	scheme[SchemeSel].bg = drw_clr_create(drw, selbgcolor);
-	scheme[SchemeSel].fg = drw_clr_create(drw, selfgcolor);
+	for(int i = 0; i < NUMCOLORS; i++){
+		scheme[i].border = drw_clr_create(drw, colors[i][0]);
+		scheme[i].fg = drw_clr_create(drw, colors[i][1]);
+		scheme[i].bg = drw_clr_create(drw, colors[i][2]);
+	}
+
 	/* init bars */
 	updatebars();
 	updatestatus();
@@ -1865,7 +1866,7 @@ unfocus(Client *c, Bool setfocus) {
 	if(!c)
 		return;
 	grabbuttons(c, False);
-	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, c->win, scheme[0].border->pix);
 	if(setfocus) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 		XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
--- dwm.c	2015-06-21 17:46:34.971243412 +0100
+++ dwm.c.orig	2015-06-21 17:47:17.849574087 +0100
@@ -92,6 +92,7 @@ enum { Manager, Xembed, XembedInfo, XLas
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkClientWin,
        ClkRootWin, ClkLast };             /* clicks */
+enum { ColBorder, ColFG, ColBG, ColLast };
 
 typedef union {
 	int i;
--- dwm.c.orig	2015-06-21 17:48:33.562392986 +0100
+++ dwm.c	2015-06-21 17:48:39.905294079 +0100
@@ -1851,8 +1851,6 @@ sigchld(int unused) {
 
 void
 spawn(const Arg *arg) {
-	if(arg->v == dmenucmd)
-		dmenumon[0] = '0' + selmon->num;
 	if(fork() == 0) {
 		if(dpy)
 			close(ConnectionNumber(dpy));
--- drw.h.orig	2015-06-21 16:10:39.056738091 +0100
+++ drw.h	2015-06-21 17:53:29.621781779 +0100
@@ -67,8 +67,9 @@ void drw_setfont(Drw *drw, Fnt *font);
 void drw_setscheme(Drw *drw, ClrScheme *scheme);
 
 /* Drawing functions */
-void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty, int invert);
-int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *text, int invert);
+int drw_colored_text(Drw *drw, ClrScheme *scheme, int numcolors, int x, int y, unsigned int w, unsigned int h, char *text);
+void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty);
+int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *text, int pad);
 
 /* Map functions */
 void drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h);
--- drw.c.orig	2015-06-21 17:57:05.438355613 +0100
+++ drw.c	2015-06-21 17:58:33.103504192 +0100
@@ -202,13 +202,38 @@ drw_setscheme(Drw *drw, ClrScheme *schem
 		drw->scheme = scheme;
 }
 
+int
+drw_colored_text(Drw *drw, ClrScheme *scheme, int numcolors, int x, int y, unsigned int w, unsigned int h, char *text) {
+	if(!drw || !drw->fontcount || !drw->scheme)
+		return 0;
+
+	char *buf = text, *ptr = buf, c =1;
+	int i;
+
+	while(*ptr) {
+		for(i = 0; *ptr < 0 || *ptr > numcolors; i++, ptr++);
+		if(!*ptr)
+			break;
+		c = *ptr;
+		*ptr = 0;
+		if(i) {
+			x = drw_text(drw, x, y, w, h, buf, 0);
+		}
+		*ptr = c;
+		drw_setscheme(drw, &scheme[c-1]);
+		buf = ++ptr;
+	}
+	drw_text(drw, x, y, w, h, buf, 0);
+	return x;
+}
+
 void
-drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty, int invert) {
+drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty) {
 	int dx;
 
 	if(!drw || !drw->fontcount || !drw->scheme)
 		return;
-	XSetForeground(drw->dpy, drw->gc, invert ? drw->scheme->bg->pix : drw->scheme->fg->pix);
+	XSetForeground(drw->dpy, drw->gc, drw->scheme->fg->pix);
 	dx = (drw->fonts[0]->ascent + drw->fonts[0]->descent + 2) / 4;
 	if(filled)
 		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x+1, y+1, dx+1, dx+1);
@@ -219,7 +244,7 @@ drw_rect(Drw *drw, int x, int y, unsigne
 int
 drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *text, int invert) {
 	char buf[1024];
-	int tx, ty, th;
+	int tx, ty;
 	Extnts tex;
 	Colormap cmap;
 	Visual *vis;
@@ -242,7 +267,7 @@ drw_text(Drw *drw, int x, int y, unsigne
 	if (!drw || !drw->scheme) {
 		return 0;
 	} else if (render) {
-		XSetForeground(drw->dpy, drw->gc, invert ? drw->scheme->fg->pix : drw->scheme->bg->pix);
+		XSetForeground(drw->dpy, drw->gc, drw->scheme->bg->pix);
 		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
 	}
 
@@ -294,10 +319,10 @@ drw_text(Drw *drw, int x, int y, unsigne
 					for(i = len; i && i > len - 3; buf[--i] = '.');
 
 				if (render) {
-					th = curfont->ascent + curfont->descent;
-					ty = y + (h / 2) - (th / 2) + curfont->ascent;
+					/* th = pad ? (curfont->ascent + curfont->descent) : 0; */
+					ty = y + ((h + curfont->ascent - curfont->descent) / 2);
 					tx = x + (h / 2);
-					XftDrawStringUtf8(d, invert ? &drw->scheme->bg->rgb : &drw->scheme->fg->rgb, curfont->xfont, tx, ty, (XftChar8 *)buf, len);
+					XftDrawStringUtf8(d, &drw->scheme->fg->rgb, curfont->xfont, tx, ty, (XftChar8 *)buf, len);
 				}
 
 				x += tex.w;
