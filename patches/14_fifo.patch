--- dwm.c	2016-09-05 19:28:47.229302576 +0100
+++ dwm.c.new	2016-09-05 19:28:45.089310729 +0100
@@ -21,6 +21,7 @@
  * To understand everything else, start reading main().
  */
 #include <errno.h>
+#include <fcntl.h>
 #include <locale.h>
 #include <stdarg.h>
 #include <signal.h>
@@ -28,6 +29,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <sys/select.h>
+#include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
@@ -186,6 +189,12 @@ struct Systray {
 	Client *icons;
 };
 
+typedef struct {
+	const char *name;
+	void (*func)(const Arg *arg);
+	const Arg arg;
+} Command;
+
 /* function declarations */
 static void applyrules(Client *c);
 static Bool applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact);
@@ -208,9 +217,11 @@ static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
+static void dispatchcmd(void);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static void enternotify(XEvent *e);
+static Bool evpredicate();
 static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
@@ -330,6 +341,7 @@ static Window root;
 static int gap;
 static Systray *systray = NULL;
 static unsigned long systrayorientation = _NET_SYSTEM_TRAY_ORIENTATION_HORZ;
+static int fifofd;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -592,6 +604,7 @@ cleanup(void) {
 	XSync(dpy, False);
 	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
 	XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
+	close(fifofd);
 }
 
 void
@@ -859,6 +872,31 @@ dirtomon(int dir) {
 	return m;
 }
 
+Bool
+evpredicate()
+{
+	return True;
+}
+
+void
+dispatchcmd(void)
+{
+       int i;
+       char buf[BUFSIZ];
+       ssize_t n;
+
+       n = read(fifofd, buf, sizeof(buf) - 1);
+       if (n == -1)
+               die("Failed to read() from DWM fifo %s:", dwmfifo);
+       buf[n] = '\0';
+       for (i = 0; i < LENGTH(commands); i++) {
+               if (strcmp(commands[i].name, buf) == 0) {
+                       commands[i].func(&commands[i].arg);
+                       break;
+               }
+       }
+}
+
 void
 drawbar(Monitor *m) {
 	int x, xx, w;
@@ -1574,10 +1612,30 @@ void
 run(void) {
 	XEvent ev;
 	/* main event loop */
-	XSync(dpy, False);
-	while(running && !XNextEvent(dpy, &ev))
-		if(handler[ev.type])
-			handler[ev.type](&ev); /* call handler */
+        fd_set rfds;
+        int n;
+        int dpyfd, maxfd;
+        /* main event loop */
+        XSync(dpy, False);
+        dpyfd = ConnectionNumber(dpy);
+        maxfd = fifofd;
+        if (dpyfd > maxfd)
+                maxfd = dpyfd;
+        maxfd++;
+        while (running) {
+                FD_ZERO(&rfds);
+                FD_SET(fifofd, &rfds);
+                FD_SET(dpyfd, &rfds);
+                n = select(maxfd, &rfds, NULL, NULL, NULL);
+                if (n > 0) {
+                        if (FD_ISSET(fifofd, &rfds))
+                                dispatchcmd();
+                        if (FD_ISSET(dpyfd, &rfds))
+                                while (XCheckIfEvent(dpy, &ev, evpredicate, NULL))
+                                        if (handler[ev.type])
+                                                handler[ev.type](&ev); /* call handler */
+                }
+        }
 }
 
 void
@@ -1827,6 +1885,9 @@ setup(void) {
 	XSelectInput(dpy, root, wa.event_mask);
 	grabkeys();
 	focus(NULL);
+	fifofd = open(dwmfifo, O_RDWR | O_NONBLOCK);
+	if (fifofd < 0)
+		die("Failed to open() DWM fifo %s:", dwmfifo);
 }
 
 void
